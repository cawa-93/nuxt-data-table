{
  "_args": [
    [
      {
        "raw": "vue-ssr-webpack-plugin@^3.0.0",
        "scope": null,
        "escapedName": "vue-ssr-webpack-plugin",
        "name": "vue-ssr-webpack-plugin",
        "rawSpec": "^3.0.0",
        "spec": ">=3.0.0 <4.0.0",
        "type": "range"
      },
      "/run/media/alex/LinWin/Develop/fb-scaner/node_modules/nuxt"
    ]
  ],
  "_from": "vue-ssr-webpack-plugin@>=3.0.0 <4.0.0",
  "_id": "vue-ssr-webpack-plugin@3.0.0",
  "_inCache": true,
  "_location": "/vue-ssr-webpack-plugin",
  "_nodeVersion": "7.8.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/vue-ssr-webpack-plugin-3.0.0.tgz_1492078088304_0.5854861419647932"
  },
  "_npmUser": {
    "name": "yyx990803",
    "email": "yyx990803@gmail.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "vue-ssr-webpack-plugin@^3.0.0",
    "scope": null,
    "escapedName": "vue-ssr-webpack-plugin",
    "name": "vue-ssr-webpack-plugin",
    "rawSpec": "^3.0.0",
    "spec": ">=3.0.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/nuxt"
  ],
  "_resolved": "https://registry.npmjs.org/vue-ssr-webpack-plugin/-/vue-ssr-webpack-plugin-3.0.0.tgz",
  "_shasum": "db47769ed8e71c8eb53aa9ae7be9ff04baf546fa",
  "_shrinkwrap": null,
  "_spec": "vue-ssr-webpack-plugin@^3.0.0",
  "_where": "/run/media/alex/LinWin/Develop/fb-scaner/node_modules/nuxt",
  "author": {
    "name": "Evan You"
  },
  "bugs": {
    "url": "https://github.com/vuejs/vue-ssr-webpack-plugin/issues"
  },
  "dependencies": {
    "chalk": "^1.1.3",
    "hash-sum": "^1.0.2"
  },
  "description": "webpack plugin for generating a bundle manifest to use with Vue 2.x bundleRenderer",
  "devDependencies": {
    "buble": "^0.15.2"
  },
  "directories": {},
  "dist": {
    "shasum": "db47769ed8e71c8eb53aa9ae7be9ff04baf546fa",
    "tarball": "https://registry.npmjs.org/vue-ssr-webpack-plugin/-/vue-ssr-webpack-plugin-3.0.0.tgz"
  },
  "files": [
    "lib"
  ],
  "gitHead": "8e7a49f498b280398c535e2f85bb78865c775367",
  "homepage": "https://github.com/vuejs/vue-ssr-webpack-plugin#readme",
  "keywords": [
    "vue",
    "ssr",
    "webpack",
    "plugin"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "yyx990803",
      "email": "yyx990803@gmail.com"
    }
  ],
  "name": "vue-ssr-webpack-plugin",
  "optionalDependencies": {},
  "readme": "# vue-ssr-webpack-plugin\n\nA Webpack plugin for generating a server-rendering bundle that can be used with Vue 2.x's [bundleRenderer](https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer#why-use-bundlerenderer). **This plugin requires `vue-server-renderer@^2.2.0`**.\n\n### Why?\n\nWhen you use Webpack's on-demand code-splitting feature (via `require.ensure` or dynamic `import`), the resulting server-side bundle will contain multiple separate files. This plugin simplifies the workflow by automatically packing these files into a single JSON file that can be passed to `bundleRenderer`.\n\n### Usage\n\n``` bash\nnpm install vue-ssr-webpack-plugin --save-dev\n```\n\n``` js\n// in your webpack server bundle config\nconst { VueSSRServerPlugin } = require('vue-ssr-webpack-plugin')\n\nmodule.exports = {\n  target: 'node',\n  entry: '...',\n  output: {\n    path: '...',\n    filename: '...',\n    libraryTarget: 'commonjs2'\n  },\n  // ...\n  plugins: [\n    new VueSSRServerPlugin()\n  ]\n}\n```\n\nBy default, the resulting bundle JSON will be generated as `vue-ssr-bundle.json` in your Webpack output directory. You can customize the filename by passing an option to the plugin:\n\n``` js\nnew VueSSRPlugin({\n  filename: 'my-bundle.json'\n})\n```\n\nUsing the generated bundle is straightforward:\n\n``` js\nconst { createBundleRenderer } = require('vue-server-renderer')\nconst bundle = require('/path/to/my-bundle.json')\nconst renderer = createBundleRenderer(bundle) // can also directly pass the absolute path string.\n```\n\n**Note:** your server bundle should have single entry, so avoid using `CommonsChunkPlugin` in your server bundle config.\n\n### Client Manifest\n\n> Requires vue-server-renderer@^2.3 and vue-ssr-webpack-plugin@^2.0\n\n`vue-server-renderer` 2.2 supports rendering the entire HTML page with the `template` option. 2.3 introduces another new feature, which allows us to pass a manifest of our client-side build to the `bundleRenderer`. This provides the renderer with information of both the server AND client builds, so it can automatically infer and inject preload/prefetch directives and script tags into the rendered HTML. This is particularly useful when rendering a bundle that leverages webpack's on-demand code splitting features: we can ensure the right chunks are preloaded/prefetched, and also directly embed `<script>` tags for needed async chunks in the HTML to avoid waterfall requests on the client, thus improving TTI (time-to-interactive).\n\nTo generate a client manifest, you need to add the client plugin to your client webpack config. In addition:\n\n- Make sure to use `CommonsChunkPlugin` to split the webpack runtime into its own entry chunk, so that async chunks can be injected **after** the runtime and **before** your main app code.\n\n- Since in this case `vue-server-renderer` will be dynamically injecting the asset links, you don't need to use `html-webpack-plugin`. However, the setup only handles JavaScript. If you want to use `html-webpack-plugin` for embedding other types of assets (e.g fonts), you can still use it - just make sure to configure it with `inject: false` so that it doesn't duplicate-inject the scripts.\n\n``` js\n// in your webpack client bundle config\nconst webpack = require('webpack')\nconst { VueSSRClientPlugin } = require('vue-ssr-webpack-plugin')\n\nmodule.exports = {\n  // ...\n  plugins: [\n    // this splits the webpack runtime into a leading chunk\n    // so that async chunks can be injected right after it.\n    // this also enables better caching for your app/vendor code.\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'manifest',\n      minChunks: Infinity\n    }),\n    // this will generate the client manifest JSON file.\n    new VueSSRClientPlugin()\n  ]\n}\n```\n\nThis will generate an additional `vue-ssr-client-manifest.json` file in your build output. Simply require and pass it to the `bundleRenderer`:\n\n``` js\nconst { createBundleRenderer } = require('vue-server-renderer')\n\nconst template = require('fs').readFileSync('/path/to/template.html', 'utf-8')\nconst serverBundle = require('/path/to/vue-ssr-bundle.json')\nconst clientManifest = require('/path/to/vue-ssr-client-manifest.json')\n\nconst renderer = createBundleRenderer(serverBundle, {\n  template,\n  clientManifest\n})\n```\n\nWith this setup, your server-rendered HTML for a build with code-splitting will look something like this:\n\n``` html\n<html><head>\n  <!-- chunks used for this render should have preload -->\n  <link rel=\"preload\" href=\"/manifest.js\" as=\"script\">\n  <link rel=\"preload\" href=\"/main.js\" as=\"script\">\n  <link rel=\"preload\" href=\"/0.js\" as=\"script\">\n  <!-- unused async chunks should have prefetch -->\n  <link rel=\"prefetch\" href=\"/1.js\" as=\"script\">\n</head><body>\n  <div data-server-rendered=\"true\"><div>async</div></div>\n  <!-- manifest chunk should be first -->\n  <script src=\"/manifest.js\"></script>\n  <!-- async chunks should be before main chunk -->\n  <script src=\"/0.js\"></script>\n  <script src=\"/main.js\"></script>\n</body></html>`\n```\n\nNote the renderer by default only generates preload links for JavaScript assets. You can apply fine-grained control on what to add preload links for using the `shouldPreload` option:\n\n``` js\nconst renderer = createBundleRenderer(serverBundle, {\n  template,\n  clientManifest,\n  shouldPreload: (file, type) => {\n    // type is inferred based on the file extension.\n    // https://fetch.spec.whatwg.org/#concept-request-destination\n    if (type === 'script') {\n      return true\n    }\n    if (type === 'font') {\n      // only preload woff2 fonts\n      return /\\.woff2$/.test(file)\n    }\n    if (type === 'image') {\n      // only preload important images\n      return file === 'hero.jpg'\n    }\n  }\n})\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/vuejs/vue-ssr-webpack-plugin.git"
  },
  "scripts": {
    "build": "buble src -o lib",
    "prepublish": "npm run build"
  },
  "version": "3.0.0"
}
