{
  "_args": [
    [
      {
        "raw": "node-exceptions@^2.0.1",
        "scope": null,
        "escapedName": "node-exceptions",
        "name": "node-exceptions",
        "rawSpec": "^2.0.1",
        "spec": ">=2.0.1 <3.0.0",
        "type": "range"
      },
      "/run/media/alex/LinWin/Develop/fb-scaner/node_modules/adonis-lucid"
    ]
  ],
  "_from": "node-exceptions@>=2.0.1 <3.0.0",
  "_id": "node-exceptions@2.0.1",
  "_inCache": true,
  "_location": "/adonis-lucid/node-exceptions",
  "_nodeVersion": "7.2.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/node-exceptions-2.0.1.tgz_1491150383047_0.6867599382530898"
  },
  "_npmUser": {
    "name": "adonisjs",
    "email": "virk@adonisjs.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-exceptions@^2.0.1",
    "scope": null,
    "escapedName": "node-exceptions",
    "name": "node-exceptions",
    "rawSpec": "^2.0.1",
    "spec": ">=2.0.1 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/adonis-lucid"
  ],
  "_resolved": "https://registry.npmjs.org/node-exceptions/-/node-exceptions-2.0.1.tgz",
  "_shasum": "9578eeff1538413d44f02f35525ffe98700e9704",
  "_shrinkwrap": null,
  "_spec": "node-exceptions@^2.0.1",
  "_where": "/run/media/alex/LinWin/Develop/fb-scaner/node_modules/adonis-lucid",
  "author": {
    "name": "amanvirk,adonisjs"
  },
  "bugs": {
    "url": "https://github.com/poppinss/node-exceptions/issues"
  },
  "config": {
    "commitizen": {
      "path": "./node_modules/cz-conventional-changelog"
    }
  },
  "dependencies": {},
  "description": "Extendable error class for nodejs to extend native errors",
  "devDependencies": {
    "coveralls": "^2.11.6",
    "cz-conventional-changelog": "^1.1.5",
    "japa": "^1.0.3",
    "japa-cli": "^1.0.1",
    "standard": "^5.4.1"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "9578eeff1538413d44f02f35525ffe98700e9704",
    "tarball": "https://registry.npmjs.org/node-exceptions/-/node-exceptions-2.0.1.tgz"
  },
  "gitHead": "0b82ded37c6318cb71fe262c701a203fc25e45d8",
  "homepage": "https://github.com/poppinss/node-exceptions#readme",
  "keywords": [
    "exception",
    "node-errors",
    "custom-errors",
    "Error"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "adonisjs",
      "email": "virk@adonisjs.com"
    }
  ],
  "name": "node-exceptions",
  "optionalDependencies": {},
  "readme": "Node Exceptions\n\n![](http://i1117.photobucket.com/albums/k594/thetutlage/poppins-1_zpsg867sqyl.png)\n\n[![Version](https://img.shields.io/npm/v/node-exceptions.svg?style=flat-square)](https://www.npmjs.com/package/node-exceptions)\n[![Build Status](https://img.shields.io/travis/poppinss/node-exceptions/master.svg?style=flat-square)](https://travis-ci.org/poppinss/node-exceptions)\n[![Coverage Status](https://img.shields.io/coveralls/poppinss/node-exceptions/master.svg?style=flat-square)](https://coveralls.io/github/poppinss/node-exceptions?branch=master)\n[![License](https://img.shields.io/npm/l/node-exceptions.svg?style=flat-square)](https://opensource.org/licenses/MIT)\n\nThrowing errors in Javascript does not give much information about the error type as it is really hard to throw custom exceptions. Node Exceptions is a tiny wrapper which will let you extend the Error class and throw custom errors.\n\n## Why custom errors\nErrors are thrown anywhere inside the code and handling them properly is required. For example you have an HTTP application, which can throw multiple errors and in order to handle those errors gracefully, you need to know the error types or their names.\n\n```javascript\nswitch (err.name) {\n  case 'HttpException':\n    // do something\n  case 'RunTimeException':\n    // do something else\n}\n```\n\n\n## Install\n\n```bash\nnpm i --save node-exceptions\n```\n\n## Creating custom errors\n\n```javascript\nconst NE = require('node-exceptions')\n\nclass MyCustomError extends NE.LogicalException {}\n\ntry {\n  throw new MyCustomError('Something bad happened')\n} catch (e) {\n  console.log(e.status) // equals 500\n  console.log(e.name) // equals MyCustomError\n  console.log(e.message) // Something bad happened\n  console.log(e.stack) // Error stack with correct reference to filepath and linenum\n  console.log(e.toString()) // MyCustomError: Something bad happened\n}\n```\n\n## Custom error status\nIt is also possible to have a custom error status when throwing exceptions.\n\n```javascript\nconst NE = require('node-exceptions')\n\nclass HttpException extends NE.LogicalException {}\n\ntry {\n  throw new HttpException('Page not found', 404)\n} catch (e) {\n  console.log(e.status) // equals 404\n}\n```\n\nAlso `NE` comes with some commonly required Exception classes which includes.\n\n#### DomainException \nWhen something excepted has failed. For example image upload mismatch extension.\n\n```javascript\nthrow new NE.DomainException()\n```\n\n#### InvalidArgumentException\nMethod arguments are invalid or incomplete.\n\n```javascript\nthrow new NE.InvalidArgumentException()\n```\n\n#### RangeException\nError caused due to arithmetic operations.\n\n```javascript\nthrow new NE.RangeException()\n```\n\n#### RuntimeException\nAn error occured after all required checks.\n\n```javascript\nthrow new NE.RuntimeException()\n```\n\n#### HttpException\nHttp specific errors.\n\n```javascript\nthrow new NE.HttpException()\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/poppinss/node-exceptions.git"
  },
  "scripts": {
    "lint": "standard"
  },
  "version": "2.0.1"
}
